/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.store.api;

import com.store.api.model.GetStockById404Response;
import com.store.api.model.Sellingprice;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-11T09:30:03.205722600+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "SellingPrice", description = "the SellingPrice API")
public interface SellingpriceApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /sellingprice:/{id} : Delete a price
     *
     * @param id  (required)
     * @return SellingPrice deleted successfully (no content) (status code 204)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "deleteSellingPrice",
        summary = "Delete a price",
        tags = { "SellingPrice" },
        responses = {
            @ApiResponse(responseCode = "204", description = "SellingPrice deleted successfully (no content)"),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStockById404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/sellingprice:/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteSellingPrice(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /sellingprice:/{id} : Get price by ID
     *
     * @param id  (required)
     * @return price found (status code 200)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "getSellingPriceById",
        summary = "Get price by ID",
        tags = { "SellingPrice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "price found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Sellingprice.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStockById404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/sellingprice:/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Sellingprice> getSellingPriceById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"priceperUnit\" : 6.0274563, \"stockId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /sellingprice:/{id} : Update a price
     *
     * @param id  (required)
     * @param sellingprice  (required)
     * @return SellingPrice updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Resource not found (status code 404)
     */
    @Operation(
        operationId = "updateSellingPrice",
        summary = "Update a price",
        tags = { "SellingPrice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SellingPrice updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Sellingprice.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetStockById404Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/sellingprice:/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Sellingprice> updateSellingPrice(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "Sellingprice", description = "", required = true) @Valid @RequestBody Sellingprice sellingprice
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"priceperUnit\" : 6.0274563, \"stockId\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
